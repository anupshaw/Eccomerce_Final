{"version":3,"file":"static/js/814.3e4699cb.chunk.js","mappings":"sPACA,GAAgB,KAAO,uBAAuB,cAAgB,gCAAgC,KAAO,uBAAuB,QAAU,2B,SCqGtI,EAjGiB,WACf,OAA8BA,EAAAA,EAAAA,WAAS,GAAK,eAArCC,EAAO,KAAEC,EAAU,KACpBC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GACrBC,GAAUC,EAAAA,EAAAA,MAKVC,GAAgBC,EAAAA,EAAAA,UAChBC,GAAmBD,EAAAA,EAAAA,UAEnBE,EAAa,yCAAG,WAAOC,GAAK,wFAc/B,OAbDC,QAAQC,IAAI,mBACZF,EAAMG,iBACAC,EAAeR,EAAcS,QAAQC,MACrCC,EAAkBT,EAAiBO,QAAQC,MACjDV,EAAcS,QAAQC,MAAM,GAC5BR,EAAiBO,QAAQC,MAAM,GAG7BE,EADEnB,EAEA,oHAGA,wGACH,mBAEoBoB,MAAMD,EAAK,CAC5BE,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACnBC,MAAOV,EACPW,SAAUR,EACVS,mBAAmB,IAErBC,QAAS,CACP,eAAgB,sBAEjB,KAAD,GAVQ,IAAJC,EAAI,QAWAC,GAAG,CAAD,iCACSD,EAAKE,OAAO,KAAD,GACa,GADrCC,EAAI,OACS,0BACfA,GAAQA,EAAKC,OAASD,EAAKC,MAAMC,SAAO,iBACR,MAAnBF,EAAKC,MAAMC,QACP,KAAD,4CAGDL,EAAKE,OAAO,KAAD,GAAxBC,EAAI,OACJG,EAAiB,IAAIC,MACzB,IAAIA,MAAOC,UAA8B,KAAjBL,EAAKM,WAE/BpC,EAAQqC,MAAMP,EAAKP,MAAMO,EAAKQ,QAASL,EAAeM,YACnDzC,EAEHK,EAAQqC,QAAQ,UAGdrC,EAAQqC,QAAQ,SACjB,0DAGHC,MAAM,EAAD,IAAQ,0DAEhB,gBAnDkB,sCAoDnB,OACE,gBAAKC,UAAWC,EAAAA,KAAa,UAC3B,iBAAKD,UAAWC,EAAAA,cAAsB,WACpC,wBAAK7C,EAAU,QAAU,aACzB,kBAAM4C,UAAWC,EAAAA,KAAcC,SAAUpC,EAAc,WACrD,kBAAOqC,QAAQ,YAAW,oBAC1B,kBACEC,GAAG,YACHC,KAAK,QACLC,IAAK3C,EACL4C,UAAQ,EACRC,WAAS,KAEX,kBAAOL,QAAQ,eAAc,uBAC7B,kBACEC,GAAG,eACHC,KAAK,WACLC,IAAKzC,EACL0C,UAAQ,KAEV,iBAAKP,UAAWC,EAAAA,QAAgB,WAC9B,SAACQ,EAAA,EAAM,CAACJ,KAAK,SAASL,UAAWC,EAAAA,IAAY,SAC1C7C,EAAU,QAAU,oBAEvB,SAACqD,EAAA,EAAM,CAACJ,KAAK,SAASL,UAAWC,EAAAA,IAAaS,QAnF1B,WAC5BrD,GAAW,SAACsD,GAAS,OAAMA,CAAS,GACtC,EAiFuF,SAC1EvD,EAAU,iBAAmB,0CAO5C,EC9FA,EAJiB,WACf,OAAO,SAAC,EAAQ,GAClB,C","sources":["webpack://react-complete-guide/./src/component/Auth/AuthForm.module.css?e8da","component/Auth/AuthForm.js","pages/AuthPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"auth\":\"AuthForm_auth__QkFmu\",\"formContainer\":\"AuthForm_formContainer__sZRvT\",\"form\":\"AuthForm_form__nNwfT\",\"actions\":\"AuthForm_actions__KBFIt\"};","import { useContext, useRef, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport AuthContext from \"../store/auth-Context\";\r\nimport Button from \"../UI/Button\";\r\nimport classes from \"./AuthForm.module.css\";\r\nconst AuthForm = () => {\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n  const switchAuthModeHandler = () => {\r\n    setIsLogin((prevState) => !prevState);\r\n  };\r\n\r\n  const InputEmailRef = useRef();\r\n  const InputPasswordRef = useRef();\r\n\r\n  const submitHandler = async (event) => {\r\n    console.log('submitting form')\r\n    event.preventDefault();\r\n    const enteredEmail = InputEmailRef.current.value;\r\n    const enteredPassword = InputPasswordRef.current.value;\r\n    InputEmailRef.current.value='';\r\n    InputPasswordRef.current.value='';\r\n    let url;\r\n    if (isLogin) {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyACWwhQRz6sD3dfeifgbz4FoSI4PjDO4BI\";\r\n    } else {\r\n      url =\r\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyACWwhQRz6sD3dfeifgbz4FoSI4PjDO4BI\";\r\n    }\r\n    try {\r\n      const resp = await fetch(url, {\r\n        method: \"POST\",\r\n        body: JSON.stringify({\r\n          email: enteredEmail,\r\n          password: enteredPassword,\r\n          returnSecureToken: true,\r\n        }),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n      if (!resp.ok) {\r\n        const data = await resp.json();\r\n        let errorMessage = \"Authentication failed\";\r\n        if (data && data.error && data.error.message) {\r\n          errorMessage = data.error.message;\r\n          throw errorMessage;\r\n        }\r\n      } else {\r\n        const data = await resp.json();\r\n        const expirationTime = new Date(\r\n          new Date().getTime() + +data.expiresIn * 1000\r\n        );\r\n        authCtx.login(data.email,data.idToken, expirationTime.toString());\r\n        if(isLogin)\r\n        {\r\n        history.replace(\"/about\");\r\n        }\r\n        else{\r\n          history.replace(\"/auth\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n  return (\r\n    <div className={classes.auth}>\r\n      <div className={classes.formContainer}>\r\n        <h1>{isLogin ? \"Login\" : \"Sign Up\"}</h1>\r\n        <form className={classes.form} onSubmit={submitHandler}>\r\n          <label htmlFor=\"userEmail\">Email</label>\r\n          <input\r\n            id=\"userEmail\"\r\n            type=\"email\"\r\n            ref={InputEmailRef}\r\n            required\r\n            autoFocus\r\n          ></input>\r\n          <label htmlFor=\"userPassword\">Password</label>\r\n          <input\r\n            id=\"userPassword\"\r\n            type=\"password\"\r\n            ref={InputPasswordRef}\r\n            required\r\n          ></input>\r\n          <div className={classes.actions}>\r\n            <Button type='submit' className={classes.btn}>\r\n              {isLogin ? \"Login\" : \"Create Account\"}\r\n            </Button>\r\n            <Button type='button' className={classes.btn} onClick={switchAuthModeHandler}>\r\n              {isLogin ? \"Create Account\" : \"Login with existing account\"}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import AuthForm from \"../component/Auth/AuthForm\";\r\n\r\nconst AuthPage = () => {\r\n  return <AuthForm />;\r\n};\r\n\r\nexport default AuthPage;\r\n"],"names":["useState","isLogin","setIsLogin","authCtx","useContext","AuthContext","history","useHistory","InputEmailRef","useRef","InputPasswordRef","submitHandler","event","console","log","preventDefault","enteredEmail","current","value","enteredPassword","url","fetch","method","body","JSON","stringify","email","password","returnSecureToken","headers","resp","ok","json","data","error","message","expirationTime","Date","getTime","expiresIn","login","idToken","toString","replace","alert","className","classes","onSubmit","htmlFor","id","type","ref","required","autoFocus","Button","onClick","prevState"],"sourceRoot":""}